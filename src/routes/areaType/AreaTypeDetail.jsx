import { useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { PencilLine, ToggleLeft, ToggleRight } from "lucide-react";
import { useDispatch, useSelector } from "react-redux";
import { fetchAreaTypeById, updateAreaType } from "../../redux/slices/AreaType";
import { toast, ToastContainer } from "react-toastify";

const AreaTypeDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const dispatch = useDispatch();

  // L·∫•y d·ªØ li·ªáu t·ª´ Redux store
  const { selectedAreaType, loading, error } = useSelector((state) => state.areaTypes);

  // G·ªçi API l·∫•y chi ti·∫øt lo·∫°i khu v·ª±c khi component render
  useEffect(() => {
    dispatch(fetchAreaTypeById(id));
  }, [dispatch, id]);

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i `isDeleted`
  const handleToggleStatus = async () => {
    const updatedStatus = !selectedAreaType.isDeleted;

    try {
      const updates = [
        {
          operationType: 0,
          path: "isDeleted",
          op: "replace",
          value: updatedStatus,
        },
      ];

      const res = await dispatch(updateAreaType({ areaTypeId: id, updatedData: updates })).unwrap();
      toast.success(res.message);
       // üü¢ Fetch l·∫°i d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán
      // üïë ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi fetch l·∫°i
    setTimeout(() => {
      dispatch(fetchAreaTypeById(id));
    }, 1000);
    } catch (error) {
      toast.error(error.message);
    }
  };

  // Hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu ho·∫∑c l·ªói
  if (loading) return <p className="text-blue-500 text-center">ƒêang t·∫£i th√¥ng tin lo·∫°i khu v·ª±c...</p>;
  if (error) return <p className="text-red-500 text-center">L·ªói: {error}</p>;
  if (!selectedAreaType) return <p className="text-gray-500 text-center">Kh√¥ng t√¨m th·∫•y lo·∫°i khu v·ª±c c√≥ ID {id}!</p>;

  // L·∫•y d·ªØ li·ªáu t·ª´ API response m·ªõi
  const { areaTypeId, areaTypeName, areaDescription, areaCategory, size, price, isDeleted, images } = selectedAreaType;

  return (
    <div className="max-w-lg mx-auto mt-10 p-6 rounded-lg shadow-lg">
      <ToastContainer />
      <h2 className="text-2xl font-semibold text-center mb-4 text-blue-600">Chi Ti·∫øt Lo·∫°i Khu V·ª±c</h2>
      <table className="w-full border-collapse border border-gray-300">
        <tbody>
          <tr className="border-b">
            <td className="px-4 py-3 font-semibold border-r border-gray-300">T√™n Lo·∫°i Khu V·ª±c</td>
            <td className="px-4 py-3">{areaTypeName}</td>
          </tr>
          <tr className="border-b">
            <td className="px-4 py-3 font-semibold border-r border-gray-300">M√¥ T·∫£</td>
            <td className="px-4 py-3">{areaDescription}</td>
          </tr>
          <tr className="border-b">
            <td className="px-4 py-3 font-semibold border-r border-gray-300">Danh M·ª•c</td>
            <td className="px-4 py-3">{areaCategory === 1 ? "Khu v·ª±c c√° nh√¢n" : "Khu v·ª±c nh√≥m"}</td>
          </tr>
          <tr className="border-b">
            <td className="px-4 py-3 font-semibold border-r border-gray-300">S·ªë l∆∞·ª£ng (gh·∫ø)</td>
            <td className="px-4 py-3">{size} gh·∫ø</td>
          </tr>
          <tr className="border-b">
            <td className="px-4 py-3 font-semibold border-r border-gray-300">Gi√°</td>
            <td className="px-4 py-3">{price.toLocaleString()} VNƒê</td>
          </tr>
          <tr className="border-b">
            <td className="px-4 py-3 font-semibold border-r border-gray-300">Tr·∫°ng Th√°i</td>
            <td className={`px-4 py-3 font-semibold ${isDeleted ? "text-red-500" : "text-green-500"}`}>
              {isDeleted ? "Kh√¥ng ho·∫°t ƒë·ªông" : "ƒêang ho·∫°t ƒë·ªông"}
            </td>
          </tr>
          {/* Hi·ªÉn th·ªã ·∫£nh */}
          <tr>
            <td className="px-4 py-3 font-semibold border-r border-gray-300">H√¨nh ·∫¢nh</td>
            <td className="px-4 py-3 flex flex-wrap gap-2">
              {images && images.length > 0 ? (
                images.map((img, index) => (
                  <img
                    key={index}
                    src={`/assets/${img}`} // Load ·∫£nh t·ª´ th∆∞ m·ª•c assets
                    alt={`areaType-${index}`}
                    className="w-20 h-20 object-cover rounded-md shadow"
                  />
                ))
              ) : (
                <span className="text-gray-500">Kh√¥ng c√≥ h√¨nh ·∫£nh</span>
              )}
            </td>
          </tr>
        </tbody>
      </table>

      {/* N√∫t Ch·ªânh s·ª≠a & Toggle Tr·∫°ng th√°i */}
      <div className="flex gap-x-3 mt-4">
        <button
          className="bg-yellow-500 text-white px-4 py-2 rounded-lg flex items-center gap-x-2 shadow-md hover:bg-yellow-600 transition"
          onClick={() => navigate(`/dashboard/areaType/update/${areaTypeId}`)}
        >
          <PencilLine size={20} /> Ch·ªânh S·ª≠a
        </button>
        <button
          className={`px-4 py-2 rounded-lg flex items-center gap-x-2 shadow-md transition ${
            isDeleted ? "bg-green-500 text-white hover:bg-green-600" : "bg-red-500 text-white hover:bg-red-600"
          }`}
          onClick={handleToggleStatus}
        >
          {isDeleted ? <ToggleLeft size={20} /> : <ToggleRight size={20} />}
          {isDeleted ? "K√≠ch ho·∫°t" : "V√¥ hi·ªáu h√≥a"}
        </button>
      </div>
    </div>
  );
};

export default AreaTypeDetail;
